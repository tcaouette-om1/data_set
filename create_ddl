from datetime import datetime, timedelta
import snowflake.connector
import pandas as pd
import numpy as np
from math import pi,sqrt
from pandas.io.json import json_normalize
import json
import os
import random
import string
import decimal
import hashlib
import pytest

dir = r"/Users/tobiascaouette/Documents/Process_Validation/TEST_FILES/"
def find_files(dir):
    list_files=[]
    for file in os.listdir(dir):
        if file.endswith(".csv"):
            list_files.append(os.path.join(dir, file))
            print(os.path.join(dir, file))
    return sorted(list_files)

files= find_files(dir)
print(files)

def create_df(list_of_files):
    df_list=[]
    for file in list_of_files:
        df_list.append(os.path.basename(file))
        df_list.append(pd.read_csv(file, index_col=0, nrows=0).columns.tolist()) 
    return df_list

df_list = create_df(files)

def table__and_columns(df_list):
    list_col=[]
    for i in range(1, len(df_list), 2):
        print(df_list[i], end = '  ')
        list_col.append(df_list[i])

    list_table=[]
    for i in range(0, len(df_list), 2):
        print(df_list[i], end = '  ')
        list_table.append(df_list[i])
    return list_table,list_col

lists=table__and_columns(df_list)
print("THIS IS THE NEW INFORMATION")
print(lists)
    

def create_ddl(role, schema_name,table_name, header_list):    
    """Create table's create DDL. Return string with create DDL"""
    columns = ""
    
    for item in header_list:
        if item != header_list[-1]:
            columns = columns + str(item) + " varchar" + ",\n\t"
        else:
            columns = columns + str(item) + " varchar"

    create_statement = f"""
    create or replace table {role}.{schema_name}.{table_name} (
    {columns}
    )
    ;\n"""
    
    return create_statement



def get_col_types(df):
    
    '''
        Helper function to create/modify Snowflake tables; gets the column and dtype pair for each item in the dataframe

        
        args:
            df: dataframe to evaluate
            
    '''
        
    import numpy as np
    
    # get dtypes and convert to df
    ct = df.dtypes.reset_index().rename(columns={0:'col'})
    ct = ct.apply(lambda x: x.astype(str).str.upper()) # case matching as snowflake needs it in uppers
        
    # only considers objects at this point
    # only considers objects and ints at this point
    ct['col'] = np.where(ct['col']=='OBJECT', 'VARCHAR', ct['col'])
    ct['col'] = np.where(ct['col'].str.contains('DATE'), 'DATETIME', ct['col'])
    ct['col'] = np.where(ct['col'].str.contains('INT'), 'NUMERIC', ct['col'])
    ct['col'] = np.where(ct['col'].str.contains('FLOAT'), 'FLOAT', ct['col'])
    
    # get the column dtype pair
    l = []
    for index, row in ct.iterrows():
        l.append(row['index'] + ' ' + row['col'])
    
    string = ', '.join(l) # convert from list to a string object
    
    string = string.strip()
    
    return string


def create_table(table, action, col_type, df):
    
    '''
        Function to create/replace and append to tables in Snowflake
        
        args:
            table: name of the table to create/modify
            action: whether do the initial create/replace or appending; key to control logic
            col_type: string with column name associated dtype, each pair separated by a comma; comes from get_col_types() func
            df: dataframe to load
            
        dependencies: function get_col_types(); helper function to get the col and dtypes to create a table
    '''
    
    import pandas as pd
    import snowflake.connector as snow
    from snowflake.connector.pandas_tools import write_pandas  
    from snowflake.connector.pandas_tools import pd_writer
   
    database=database
    warehouse=warehouse
    schema=schema
    
    # set up connection
    conn = snow.connect(
               account = ACCOUNT,
               user = USER,
               password = PW,
               warehouse = warehouse,
               database = database,
               schema = schema,
               role = ROLE)    

    # set up cursor
    cur = conn.cursor()
    
    if action=='create_replace':
    
        # set up execute
        cur.execute(
            """ CREATE OR REPLACE TABLE 
            """ + table +"""(""" + col_type + """)""") 

        #prep to ensure proper case
        df.columns = [col.upper() for col in df.columns]

        # write df to table
        write_pandas(conn, df, table.upper())
        
    elif action=='append':
        
        # convert to a string list of tuples
        df = str(list(df.itertuples(index=False, name=None)))
        # get rid of the list elements so it is a string tuple list
        df = df.replace('[','').replace(']','')
        
        # set up execute
        cur.execute(
            """ INSERT INTO """ + table + """
                VALUES """ + df + """

            """)  


            # create df
l1 = ['cats','dogs','frogs']   
l2 = [10, 20, 30]
df = pd.DataFrame(zip(l1,l2), columns=['type','age'])
col_type = get_col_types(df)
create_table('table_test', 'create_replace', col_type, df)

# now that the table is created, append to it
l1 = ['cow','cricket']   
l2 = [45, 20]
df2 = pd.DataFrame(zip(l1,l2), columns=['type','age'])
append_table('table_test', 'append', None, df2)